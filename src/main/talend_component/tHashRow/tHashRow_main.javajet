<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.utils.NodeUtil
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.metadata.IMetadataTable
		java.util.List
                java.util.Map
                java.util.HashMap
	" 
%>


<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode) codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String outputColumn = ElementParameterParser.getValue(node, "__OUTPUT_COLUMN__");
	boolean exposeHashBase = ("true").equals(ElementParameterParser.getValue(node,"__EXPOSE_HASH_BASE__"));
	String hashBaseOutputColumn = ElementParameterParser.getValue(node, "__HASH_BASE_OUTPUT_COLUMN__");

        IConnection connIn = null;
	Map<String, IMetadataColumn> inColumns = new HashMap<String, IMetadataColumn>(); // to check the out going columns for hand over the data
	List<? extends IConnection> inConns = NodeUtil.getIncomingConnections(node, IConnectionCategory.DATA);
	if (inConns.size() > 0) {
		connIn = inConns.get(0);
		IMetadataTable inMetadataTable = connIn.getMetadataTable();
		for (IMetadataColumn column : inMetadataTable.getListColumns()) {
			inColumns.put(column.getLabel(), column);
		}
	}
	IConnection connOut = null;
	List<? extends IConnection> outConns = NodeUtil.getOutgoingConnections(node, IConnectionCategory.DATA);
	if (outConns.size() > 0) {
		connOut = outConns.get(0);
	}
%>
	
	<%=cid%>_hn.reset();
	<%=cid%>_nbLines++;
	globalMap.put("<%=cid%>_NB_LINE", <%=cid%>_nbLines);
<%	@SuppressWarnings("unchecked")
	List<Map<String, String>> columnList = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__COLUMN_CONFIG__");
	if (connIn != null && columnList != null) {

		boolean use = false;
		boolean itemTrimming = false;
		String itemCaseSensetive = "";

		for (Map<String, String> ce : columnList) {
			String columnName = ce.get("SCHEMA_COLUMN");

		
			use = "true".equalsIgnoreCase(ce.get("USE"));
			itemTrimming = "true".equals(ce.get("TRIM"));
			itemCaseSensetive = ce.get("CASE_SENSITIVE");		

			if (columnName.equals(outputColumn)) {
				continue;
			}
			
			IMetadataColumn column = inColumns.get(columnName);
			if (column == null) {
				continue;
			}
						
			if (use) {
%>
				de.cimt.talendcomp.checksum.NormalizeObjectConfig <%=cid%>_itemConfig_<%=columnName%> = new de.cimt.talendcomp.checksum.NormalizeObjectConfig("<%=itemCaseSensetive%>", <%=itemTrimming%>);
				try {
					<%=cid%>_hn.add(<%=connIn.getName()%>.<%=columnName%>, <%=cid%>_itemConfig_<%=columnName%>);
				} catch (Exception e) {
					globalMap.put("<%=cid%>_ERROR_MESSAGE","Convert to String and add column <%=columnName%> to checksum failed:" + e.getMessage());
					throw e; 
				}

<%			} // END if(use)
			
			if (connOut != null) { %>
				<%=connOut.getName()%>.<%=columnName%> = <%=connIn.getName()%>.<%=columnName%>;		
<%			}

		} // END for
	}
%>
	try {
		String hash = <%=cid%>_hn.calculateHash(<%=cid%>_type, <%=cid%>_encoding);
		
<%			if (connOut != null && outputColumn != null && outputColumn.isEmpty() == false) { %>
				<%=connOut.getName()%>.<%=outputColumn%> = hash;
				globalMap.put("<%=cid%>_HASH", hash);
<%			} %>


<%			if (exposeHashBase){ %>
				<%=connOut.getName()%>.<%=hashBaseOutputColumn%> = <%=cid%>_hn.getNormalizedString();
<%			} %>

	} catch (Exception e) {
		globalMap.put("<%=cid%>_ERROR_MESSAGE","Build hash failed:" + e.getMessage());
		throw e;
	}
	